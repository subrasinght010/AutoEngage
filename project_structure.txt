project/
â”œâ”€â”€ main.py                          # FastAPI with WebSocket (existing)
â”œâ”€â”€ .env                             # Configuration
â”œâ”€â”€ requirements.txt                 # Updated dependencies
â”‚
â”œâ”€â”€ tools/
â”‚   â”œâ”€â”€ language_model.py           # Mistral 7B LLM (existing - update)
â”‚   â”œâ”€â”€ vector_store.py             # ðŸ†• RAG system (ChromaDB)
â”‚   â”œâ”€â”€ stt.py                      # Whisper (existing)
â”‚   â””â”€â”€ tts.py                      # ðŸ†• TTS implementation
â”‚
â”œâ”€â”€ nodes/
â”‚   â”œâ”€â”€ stt_node.py                 # Speech-to-text (existing)
â”‚   â”œâ”€â”€ tts_node.py                 # Text-to-speech (existing)
â”‚   â”œâ”€â”€ intent_detector.py          # Intent + LLM call (existing - update)
â”‚   â”œâ”€â”€ incoming_listener.py        # Handle incoming (existing)
â”‚   â”œâ”€â”€ communication_agent.py      # Email/SMS/WhatsApp (existing)
â”‚   â”œâ”€â”€ schedule_call.py            # Callback scheduling (existing)
â”‚   â”œâ”€â”€ db_update.py                # Database updates (existing)
â”‚   â”œâ”€â”€ verify_data.py              # Lead verification (existing)
â”‚   â”œâ”€â”€ follow_up.py                # Follow-up logic (existing)
â”‚   â””â”€â”€ knowledge_agent.py          # ðŸ†• RAG query handler (existing - update)
â”‚
â”œâ”€â”€ services/                        # ðŸ†• Communication services
â”‚   â”œâ”€â”€ email_service.py            # SendGrid/SMTP
â”‚   â”œâ”€â”€ sms_service.py              # Twilio SMS
â”‚   â””â”€â”€ whatsapp_service.py         # Twilio WhatsApp
â”‚
â”œâ”€â”€ database/
â”‚   â”œâ”€â”€ db.py                       # Database setup (existing)
â”‚   â”œâ”€â”€ models.py                   # SQLAlchemy models (existing)
â”‚   â”œâ”€â”€ crud.py                     # CRUD operations (existing)
â”‚   â””â”€â”€ migrations/                 # Alembic migrations (existing)
â”‚
â”œâ”€â”€ state/
â”‚   â””â”€â”€ workflow_state.py           # Workflow state (existing)
â”‚
â”œâ”€â”€ utils/
â”‚   â”œâ”€â”€ audio.py                    # Audio validation (existing)
â”‚   â”œâ”€â”€ secure.py                   # Auth helpers (existing)
â”‚   â””â”€â”€ prompts.py                  # ðŸ†• LLM prompts
â”‚
â”œâ”€â”€ graph_builder.py                # LangGraph workflow (existing)
â”‚
â”œâ”€â”€ knowledge_base/                 # ðŸ†• RAG documents
â”‚   â”œâ”€â”€ company_policies.pdf
â”‚   â”œâ”€â”€ product_catalog.pdf
â”‚   â”œâ”€â”€ faqs.txt
â”‚   â”œâ”€â”€ pricing.json
â”‚   â””â”€â”€ troubleshooting.md
â”‚
â”œâ”€â”€ chroma_db/                      # ðŸ†• ChromaDB storage (auto-generated)
â”‚   â””â”€â”€ (vector database files)
â”‚
â”œâ”€â”€ frontend/
â”‚   â”œâ”€â”€ templates/
â”‚   â”‚   â”œâ”€â”€ login.html              # Login page (existing)
â”‚   â”‚   â”œâ”€â”€ signup.html             # Signup page (existing)
â”‚   â”‚   â””â”€â”€ index.html              # Main chat interface (existing)
â”‚   â””â”€â”€ static/
â”‚       â””â”€â”€ (CSS, JS files)
â”‚
â””â”€â”€ scripts/                        # ðŸ†• Utility scripts
    â”œâ”€â”€ setup_rag.py                # Initialize RAG system
    â””â”€â”€ test_rag.py                 # Test RAG queries