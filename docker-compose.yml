version: "3.9"

services:
  chroma:
    image: mcp/chroma:latest
    container_name: chroma_db
    restart: always
    ports:
      - "8000:8000"
    volumes:
      - /Users/subrat/Desktop/Agent/cromadb:/chroma/chroma
    environment:
      - IS_PERSISTENT=TRUE
      - ANONYMIZED_TELEMETRY=TRUE

  # Main application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai_agent
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql+asyncpg://aiagent:aiagent_password@postgres:5432/aiagent_db
      - SECRET_KEY=${SECRET_KEY}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
      - TWILIO_WHATSAPP_NUMBER=${TWILIO_WHATSAPP_NUMBER}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - EMAIL_USERNAME=${EMAIL_USERNAME}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - EMAIL_IMAP_SERVER=${EMAIL_IMAP_SERVER}
      - USE_OLLAMA=true
    volumes:
      - ./audio_data:/app/audio_data
      - ./chroma_db:/app/chroma_db
      - ./knowledge_base:/app/knowledge_base
    depends_on:
      - postgres
      - redis
      - ollama
    networks:
      - ai_agent_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/quick"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database
  postgres:
    image: postgres:14-alpine
    container_name: ai_agent_postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=aiagent
      - POSTGRES_PASSWORD=aiagent_password
      - POSTGRES_DB=aiagent_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - ai_agent_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aiagent"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (optional - for caching/sessions)
  redis:
    image: redis:7-alpine
    container_name: ai_agent_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai_agent_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Ollama LLM service
  ollama:
    image: ollama/ollama:latest
    container_name: ai_agent_ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - ai_agent_network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # # ChromaDB for RAG (optional - can use embedded)
  # chroma:
  #   image: chromadb/chroma:latest
  #   container_name: ai_agent_chroma
  #   restart: unless-stopped
  #   ports:
  #     - "8000:8000"
  #   volumes:
  #     - chroma_data:/chroma/chroma
  #   environment:
  #     - IS_PERSISTENT=TRUE
  #     - ANONYMIZED_TELEMETRY=FALSE
  #   networks:
  #     - ai_agent_network

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: ai_agent_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - ai_agent_network

volumes:
  postgres_data:
  redis_data:
  ollama_data:
  chroma_data:

networks:
  ai_agent_network:
    driver: bridge